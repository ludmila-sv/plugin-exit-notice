{"version":3,"sources":["partials/plugin-styles.scss","variables.scss","mixins/shadows.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AACC,sBAOC,YAAa,CACb,6BAA+B,CAGhC,0CAVC,YAAa,CACb,cAAe,CACf,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAYc,CAPf,oBAOC,aAAc,CAEd,0BACC,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,eAAgB,CAChB,YAAa,CACb,wBAAyB,CACzB,qBCxBS,CDyBT,sCAAgC,CAAhC,8BAAgC,CE3BlC,sCAAsD,CCuEnD,4BHpDF,0BAYE,aAAc,CAEf,CAGD,2BACC,iBAAkB,CAClB,UAAW,CACX,YAAa,CACb,YAAa,CACb,aAAc,CACd,6CAAmD,CACnD,uBAAwB,CACxB,UAAY,CACZ,cAAe,CATf,iCAYC,SAAU,CAIZ,6BACC,eAAgB,CAChB,gBAAmB,CACnB,+BChDiB,CDmDlB,2BACC,eAAgB,CAGjB,0BACC,kBAAoB,CACpB,mBAAqB,CACrB,gBAAiB,CAHjB,+BAMC,oBAAuB,CAK1B,wBACC,YAAa","file":"styles.css","sourcesContent":[".exit-notice {\n\t&__overlay {\n\t\tdisplay: none;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tz-index: 9999;\n\t\tbackground: rgba(31,52,74,0.75);\n\t}\n\n\t&__popup {\n\t\tdisplay: none;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tz-index: 10000;\n\n\t\t&__body {\n\t\t\tposition: relative;\n\t\t\ttop: 50%;\n\t\t\tleft: 50%;\n\t\t\tmax-width: 37rem;\n\t\t\tpadding: 3rem;\n\t\t\tborder: 1px solid #D5D5D5;\n\t\t\tbackground-color: $white;\n\t\t\ttransform: translate(-50%, -50%);\n\t\t\t@include large-shadow();\n\n\t\t\t@include media-breakpoint-down(sm) {\n\t\t\t\tmax-width: 90%;\n\t\t\t}\n\t\t}\n\n\n\t\t&__close {\n\t\t\tposition: absolute;\n\t\t\ttop: 1.5rem;\n\t\t\tright: 1.5rem;\n\t\t\twidth: 1.5rem;\n\t\t\theight: 1.5rem;\n\t\t\tbackground: url( ../images/x.svg ) no-repeat center;\n\t\t\tbackground-size: contain;\n\t\t\topacity: 0.5;\n\t\t\tcursor: pointer;\n\n\t\t\t&:hover {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t}\n\n\t\t&__content {\n\t\t\tmargin: 0 0 2rem;\n\t\t\tpadding: 0 0 2rem 0;\n\t\t\tborder-bottom: 1px solid $light-gray;\n\t\t}\n\n\t\t&__title {\n\t\t\tmargin: 0 0 2rem;\n\t\t}\n\n\t\t&__btns {\n\t\t\tmargin-left: -0.5rem;\n\t\t\tmargin-right: -0.5rem;\n\t\t\ttext-align: right;\n\n\t\t\t.btn {\n\t\t\t\tmargin: 0 0.5rem 0.5rem;\n\t\t\t}\n\t\t}\n\t}\n\n\t&__whitelist {\n\t\tdisplay: none;\n\t}\n}\n","/* Colors */\n$accent-variant: #1a78b6;\n$accent: #0f95b7;\n$gold: #ffd000;\n$white: #fff;\n$black: #000;\n$dark-gray: #4d4d4d;\n$gray: #737373;\n$middle-gray: #b2b2b2;\n$light-gray: #d5d5d5;\n$light: #f5f5f5;\n\n$border: #b2b2b2;\n\n$text: $dark;\n","/*  set desired standard shadows */\n@mixin large-shadow() {\n\tbox-shadow: 0 20px 60px transparentize( $black, 0.75 );\n}\n\n@mixin small-shadow() {\n\tbox-shadow: 0 10px 25px transparentize( $black, 0.85 );\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}